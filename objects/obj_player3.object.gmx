<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//character properties
maxHealth = 5;
currHeath = maxHealth;

spd = 0;
dir = 0;
fric = 0.5;
max_spd = 6;
accl = 0.9;

attackSpeed = 1;

walkedDirLR = 1;
walkedDirUD = 1; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>v_dir = (keyboard_check(ord("S")) || keyboard_check(vk_down)) - (keyboard_check(ord("W")) || keyboard_check(vk_up));
h_dir = (keyboard_check(ord("D")) || keyboard_check(vk_right)) - (keyboard_check(ord("A")) || keyboard_check(vk_left));

if (abs(spd) &gt;= fric) spd -= sign(spd) * fric
else spd = 0

input_dir = point_direction(0, 0, h_dir, v_dir);

if(h_dir != 0 or v_dir != 0)
{
    spd = point_distance(0, 0, lengthdir_x(spd, dir) + lengthdir_x(accl, input_dir), lengthdir_y(spd, dir) + lengthdir_y(accl, input_dir));
    dir = point_direction(0, 0, lengthdir_x(spd, dir) + lengthdir_x(accl, input_dir), lengthdir_y(spd, dir) + lengthdir_y(accl, input_dir));
}

if (abs(spd) &gt;= max_spd) spd = sign(spd) * max_spd;


 x += lengthdir_x(spd, dir);
 y += lengthdir_y(spd, dir); 
/*
if (place_meeting(x + lengthdir_x(spd,dir), y, obj_static_parent))
{
    while(!place_meeting(x + lengthdir_x(spd,dir), y, obj_static_parent))
    {    
        x += lengthdir_x(1, dir);
    }
}
else if (place_meeting(x + lengthdir_x(spd,dir), y, obj_static_playerblock))
{
    while(!place_meeting(x + lengthdir_x(spd,dir), y, obj_static_playerblock))
    {    
        x += lengthdir_x(1, dir);
    }
}
else 
{
    x += lengthdir_x(spd, dir);
}


if (place_meeting(x, y + lengthdir_y(spd,dir), obj_static_parent))
{
    while(!place_meeting(x, y + lengthdir_y(spd,dir), obj_static_parent))
    {
        y += lengthdir_y(1,dir);
    }
}

else if (place_meeting(x, y + lengthdir_y(spd,dir), obj_static_playerblock))
{
    while(!place_meeting(x, y + lengthdir_y(spd,dir), obj_static_playerblock))
    {    
        x += lengthdir_x(1, dir);
    }
}
else 
{
    y += lengthdir_y(spd, dir); 
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
